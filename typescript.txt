/*Importação de módulo nativo do ECMAScript*/
O atributo type="module" indica para o navegador que o arquivo a ser carregado, deve ser tratado como um módulo, e não um script

/*Módulo e seu escopo*/
Tudo o que for declarado dentro de um módulo estará confinado nesse módulo, ao menos que o desenvolvedor decida exportar uma ou mais funcionalidades

/*Sobre o compilador do TypeScript*/
O uso do Node.js não é opcional, pois o compilador depende desta plataforma para funcionar, inclusive é baixado pelo seu gerenciador de pacotes npm. Além disso, o código TypeScript precisa ser traduzido/convertido para um código ECMASCRIPT para que seja entendido pelo navegador. Apenas ECMASCRIPT é suportado pelo navegador.

/*tsconfig.json*/
A propriedade "target" indica para o compilador tsc para qual versão do JavaScript o código escrito em TypeScript deve ser compilado. Isso significa que o resultado final serão arquivos JavaScript sem qualquer referência a sintaxe do TypeScript.

/*namespaces*/
- trabalham com escopo global, por esse motivo não precisa importar como nos modules
- a organização dos namespaces é mais lógica e feita em objetos, não importa se está em um ou mais arquivos
- eles não precisam de bibliotecas pra ser usado

/*modules*/
- não ficam no escopo global, por isso precisamos usar o import
- toda implementação, se torna um module separado
- precisam usar a biblioteca commonjs ou require.js

/*private*/
podemos usar a palavra reservada private para definir elementos da classe como privados, dessa forma, apenas métodos da própria classe podem acessá-la

/*protected*/
podemos usar a palavra reservada protected para criar elementos que somente as classes que herdam da classe pai, podem usar


/*noImplicitAny": true*/
podemos usar este comando no tsconfig.json para o typescript emitir um erro sempre que o tipo any for adotado automaticamente

/*ReadonlyArray*/
eu posso usar esse tipo para evitar que minha lista seja alterada indevidamente por algum método, com este comando eu posso tornar minha lista em uma lista de somente leitura

/*innerHTML*/
recebe uma string que é convertida para elementos do DOM